"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ping = exports.pingUri = void 0;
const bigint_buffer_1 = require("bigint-buffer");
const dns_1 = require("dns");
const net_1 = require("net");
const url = __importStar(require("url"));
const varint_1 = require("varint");
const PacketDecoder_1 = require("./PacketDecoder");
const PROTOCOL_VERSION = 335; // Minecraft 1.12
/**
 * ping with URI
 * @param {string} uri minecraft://server[:port]
 * @return {Promise<IMinecraftData>}
 */
function pingUri(uri) {
    const { protocol, hostname, port } = url.parse(uri);
    if (!hostname || !protocol || protocol !== 'minecraft:') {
        throw new TypeError('not correct minecraft URI');
    }
    return ping(hostname, port ? parseInt(port, 10) : undefined);
}
exports.pingUri = pingUri;
/**
 * ping with hostname and port
 * @param {string=} hostname hostname
 * @param {number=} port port number (defaults 25565)
 * @returns {Promise<IMinecraftData>}
 */
async function ping(hostname = 'localhost', port = 25565) {
    let address = { hostname, port };
    try {
        address = await checkSrvRecord(address.hostname);
    }
    catch (err) {
        // ignore
    }
    return openConnection(address);
}
exports.ping = ping;
function checkSrvRecord(hostname) {
    return new Promise((resolve, reject) => {
        if (net_1.isIP(hostname) !== 0) {
            reject(new Error('Hostname is an IP address'));
        }
        else {
            dns_1.resolveSrv('_minecraft._tcp.' + hostname, (error, result) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (result.length === 0 || !result[0]) {
                        reject(new Error('dns: no srv found with name'));
                    }
                    else {
                        resolve({
                            hostname: result[0].name,
                            port: result[0].port,
                        });
                    }
                }
            });
        }
    });
}
function openConnection(address) {
    let timeout;
    return new Promise((resolve, reject) => {
        const socket = net_1.createConnection(address.port, address.hostname, async () => {
            const packetDecoder = new PacketDecoder_1.PacketDecoder();
            socket.pipe(packetDecoder);
            packetDecoder.once('error', (error) => {
                socket.destroy();
                if (timeout) {
                    clearTimeout(timeout);
                }
                reject(error);
            });
            // handshake
            socket.write(createHandshakePacket(address));
            const handshakeData = await packetDecoder.oncePromise('handshake');
            // ping
            socket.write(createPingPacket(BigInt(Date.now())));
            const pingData = await packetDecoder.oncePromise('pong');
            if (timeout) {
                clearTimeout(timeout);
            }
            socket.end();
            resolve({
                ...handshakeData,
                ping: pingData,
            });
        });
        // Destroy on error
        socket.once('error', (error) => {
            socket.destroy();
            if (timeout) {
                clearTimeout(timeout);
            }
            reject(error);
        });
        // Destroy on timeout
        socket.once('timeout', () => {
            socket.destroy();
            if (timeout) {
                clearTimeout(timeout);
            }
            reject(new Error('Timed out'));
        });
        // Packet timeout (10 seconds)
        timeout = setTimeout(() => {
            socket.end();
            reject(new Error('Timed out (10 seconds passed)'));
        }, 10000);
    });
}
function createHandshakePacket(address) {
    const portBuffer = Buffer.allocUnsafe(2);
    portBuffer.writeUInt16BE(address.port, 0);
    // Return hansdhake packet with request packet
    return Buffer.concat([
        createPacket(0, Buffer.concat([
            Buffer.from(varint_1.encode(PROTOCOL_VERSION)),
            Buffer.from(varint_1.encode(address.hostname.length)),
            Buffer.from(address.hostname, 'utf8'),
            portBuffer,
            Buffer.from(varint_1.encode(1)),
        ])),
        createPacket(0, Buffer.alloc(0)),
    ]);
}
function createPingPacket(timestamp) {
    return createPacket(1, bigint_buffer_1.toBufferBE(timestamp, 8));
}
function createPacket(packetId, data) {
    return Buffer.concat([Buffer.from(varint_1.encode(varint_1.encodingLength(packetId) + data.length)), Buffer.from(varint_1.encode(packetId)), data]);
}
//# sourceMappingURL=data:application/json;base64,