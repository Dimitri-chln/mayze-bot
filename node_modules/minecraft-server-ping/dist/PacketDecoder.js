"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PacketDecoder = void 0;
const bigint_buffer_1 = require("bigint-buffer");
const stream_1 = require("stream");
const varint_1 = require("varint");
var PackageType;
(function (PackageType) {
    PackageType[PackageType["HANDSHAKE"] = 0] = "HANDSHAKE";
    PackageType[PackageType["PING"] = 1] = "PING";
})(PackageType || (PackageType = {}));
class PacketDecoder extends stream_1.Writable {
    constructor(options) {
        super(options);
        this.buffer = Buffer.alloc(0);
    }
    oncePromise(event) {
        return new Promise((resolve) => {
            this.once(event, resolve);
        });
    }
    async _write(chunk, encoding, callback) {
        const { getPayload, decodeHandshake, decodePong } = this;
        if (!this.packetInfo) {
            this.packetInfo = this.decodeHeader(chunk);
        }
        this.buffer = Buffer.concat([this.buffer, chunk]);
        if (this.packetInfo) {
            if (this.buffer.length < this.packetInfo.length) {
                // do we still need to read more?
                return callback();
            }
            if (this.buffer.length > this.packetInfo.length) {
                throw new Error('we did overrun expected data size!');
            }
        }
        try {
            if (this.packetInfo) {
                switch (this.packetInfo.id) {
                    case PackageType.HANDSHAKE: {
                        this.emit('handshake', decodeHandshake(getPayload(this.packetInfo, this.buffer)));
                        break;
                    }
                    case PackageType.PING: {
                        this.emit('pong', decodePong(getPayload(this.packetInfo, this.buffer)));
                        break;
                    }
                    default:
                        this.emit('error', new Error('Unknown packet id: ' + this.packetInfo.id));
                }
            }
            this.buffer = Buffer.alloc(0);
            this.packetInfo = undefined;
        }
        catch (err) {
            this.emit('error', err);
        }
        callback();
    }
    decodeHeader(buffer) {
        const length = varint_1.decode(buffer);
        return {
            id: buffer.readUInt8(varint_1.encodingLength(length)),
            length: length + varint_1.encodingLength(length),
            offset: varint_1.encodingLength(length) + 3,
        };
    }
    getPayload(header, data) {
        return data.slice(header.offset, data.length);
    }
    decodeHandshake(data) {
        return JSON.parse(data.toString());
    }
    decodePong(data) {
        return Number(BigInt(Date.now()) - bigint_buffer_1.toBigIntBE(data));
    }
}
exports.PacketDecoder = PacketDecoder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFja2V0RGVjb2Rlci5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbIlBhY2tldERlY29kZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaURBQXlDO0FBQ3pDLG1DQUFnQztBQUNoQyxtQ0FBOEM7QUFFOUMsSUFBSyxXQUdKO0FBSEQsV0FBSyxXQUFXO0lBQ2YsdURBQWEsQ0FBQTtJQUNiLDZDQUFRLENBQUE7QUFDVCxDQUFDLEVBSEksV0FBVyxLQUFYLFdBQVcsUUFHZjtBQVFELE1BQWEsYUFBYyxTQUFRLGlCQUFRO0lBSTFDLFlBQVksT0FBYTtRQUN4QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVNLFdBQVcsQ0FBZ0IsS0FBYTtRQUM5QyxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFhLEVBQUUsUUFBYSxFQUFFLFFBQWE7UUFDOUQsTUFBTSxFQUFDLFVBQVUsRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ3ZELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMzQztRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUVsRCxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDcEIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRTtnQkFDaEQsaUNBQWlDO2dCQUNqQyxPQUFPLFFBQVEsRUFBRSxDQUFDO2FBQ2xCO1lBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRTtnQkFDaEQsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO2FBQ3REO1NBQ0Q7UUFDRCxJQUFJO1lBQ0gsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUNwQixRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFO29CQUMzQixLQUFLLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQzt3QkFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsZUFBZSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ2xGLE1BQU07cUJBQ047b0JBQ0QsS0FBSyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUN4RSxNQUFNO3FCQUNOO29CQUNEO3dCQUNDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksS0FBSyxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztpQkFDM0U7YUFDRDtZQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QixJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztTQUM1QjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDeEI7UUFDRCxRQUFRLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFTyxZQUFZLENBQUMsTUFBYztRQUNsQyxNQUFNLE1BQU0sR0FBRyxlQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUIsT0FBTztZQUNOLEVBQUUsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLHVCQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDNUMsTUFBTSxFQUFFLE1BQU0sR0FBRyx1QkFBYyxDQUFDLE1BQU0sQ0FBQztZQUN2QyxNQUFNLEVBQUUsdUJBQWMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1NBQ2xDLENBQUM7SUFDSCxDQUFDO0lBRU8sVUFBVSxDQUFDLE1BQWUsRUFBRSxJQUFZO1FBQy9DLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRU8sZUFBZSxDQUFDLElBQVk7UUFDbkMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFTyxVQUFVLENBQUMsSUFBWTtRQUM5QixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsMEJBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7Q0FDRDtBQTFFRCxzQ0EwRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3RvQmlnSW50QkV9IGZyb20gJ2JpZ2ludC1idWZmZXInO1xuaW1wb3J0IHtXcml0YWJsZX0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7ZGVjb2RlLCBlbmNvZGluZ0xlbmd0aH0gZnJvbSAndmFyaW50JztcblxuZW51bSBQYWNrYWdlVHlwZSB7XG5cdEhBTkRTSEFLRSA9IDAsXG5cdFBJTkcgPSAxLFxufVxuXG5pbnRlcmZhY2UgSUhlYWRlciB7XG5cdGlkOiBQYWNrYWdlVHlwZTtcblx0bGVuZ3RoOiBudW1iZXI7XG5cdG9mZnNldDogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgUGFja2V0RGVjb2RlciBleHRlbmRzIFdyaXRhYmxlIHtcblx0cHJpdmF0ZSBwYWNrZXRJbmZvOiBJSGVhZGVyIHwgdW5kZWZpbmVkO1xuXHRwcml2YXRlIGJ1ZmZlcjogQnVmZmVyO1xuXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBhbnkpIHtcblx0XHRzdXBlcihvcHRpb25zKTtcblx0XHR0aGlzLmJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygwKTtcblx0fVxuXG5cdHB1YmxpYyBvbmNlUHJvbWlzZTxUIGV4dGVuZHMgYW55PihldmVudDogc3RyaW5nKTogUHJvbWlzZTxUPiB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG5cdFx0XHR0aGlzLm9uY2UoZXZlbnQsIHJlc29sdmUpO1xuXHRcdH0pO1xuXHR9XG5cblx0cHVibGljIGFzeW5jIF93cml0ZShjaHVuazogQnVmZmVyLCBlbmNvZGluZzogYW55LCBjYWxsYmFjazogYW55KSB7XG5cdFx0Y29uc3Qge2dldFBheWxvYWQsIGRlY29kZUhhbmRzaGFrZSwgZGVjb2RlUG9uZ30gPSB0aGlzO1xuXHRcdGlmICghdGhpcy5wYWNrZXRJbmZvKSB7XG5cdFx0XHR0aGlzLnBhY2tldEluZm8gPSB0aGlzLmRlY29kZUhlYWRlcihjaHVuayk7XG5cdFx0fVxuXHRcdHRoaXMuYnVmZmVyID0gQnVmZmVyLmNvbmNhdChbdGhpcy5idWZmZXIsIGNodW5rXSk7XG5cblx0XHRpZiAodGhpcy5wYWNrZXRJbmZvKSB7XG5cdFx0XHRpZiAodGhpcy5idWZmZXIubGVuZ3RoIDwgdGhpcy5wYWNrZXRJbmZvLmxlbmd0aCkge1xuXHRcdFx0XHQvLyBkbyB3ZSBzdGlsbCBuZWVkIHRvIHJlYWQgbW9yZT9cblx0XHRcdFx0cmV0dXJuIGNhbGxiYWNrKCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5idWZmZXIubGVuZ3RoID4gdGhpcy5wYWNrZXRJbmZvLmxlbmd0aCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ3dlIGRpZCBvdmVycnVuIGV4cGVjdGVkIGRhdGEgc2l6ZSEnKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dHJ5IHtcblx0XHRcdGlmICh0aGlzLnBhY2tldEluZm8pIHtcblx0XHRcdFx0c3dpdGNoICh0aGlzLnBhY2tldEluZm8uaWQpIHtcblx0XHRcdFx0XHRjYXNlIFBhY2thZ2VUeXBlLkhBTkRTSEFLRToge1xuXHRcdFx0XHRcdFx0dGhpcy5lbWl0KCdoYW5kc2hha2UnLCBkZWNvZGVIYW5kc2hha2UoZ2V0UGF5bG9hZCh0aGlzLnBhY2tldEluZm8sIHRoaXMuYnVmZmVyKSkpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNhc2UgUGFja2FnZVR5cGUuUElORzoge1xuXHRcdFx0XHRcdFx0dGhpcy5lbWl0KCdwb25nJywgZGVjb2RlUG9uZyhnZXRQYXlsb2FkKHRoaXMucGFja2V0SW5mbywgdGhpcy5idWZmZXIpKSk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ1Vua25vd24gcGFja2V0IGlkOiAnICsgdGhpcy5wYWNrZXRJbmZvLmlkKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMuYnVmZmVyID0gQnVmZmVyLmFsbG9jKDApO1xuXHRcdFx0dGhpcy5wYWNrZXRJbmZvID0gdW5kZWZpbmVkO1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0dGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG5cdFx0fVxuXHRcdGNhbGxiYWNrKCk7XG5cdH1cblxuXHRwcml2YXRlIGRlY29kZUhlYWRlcihidWZmZXI6IEJ1ZmZlcik6IElIZWFkZXIge1xuXHRcdGNvbnN0IGxlbmd0aCA9IGRlY29kZShidWZmZXIpO1xuXHRcdHJldHVybiB7XG5cdFx0XHRpZDogYnVmZmVyLnJlYWRVSW50OChlbmNvZGluZ0xlbmd0aChsZW5ndGgpKSxcblx0XHRcdGxlbmd0aDogbGVuZ3RoICsgZW5jb2RpbmdMZW5ndGgobGVuZ3RoKSxcblx0XHRcdG9mZnNldDogZW5jb2RpbmdMZW5ndGgobGVuZ3RoKSArIDMsXG5cdFx0fTtcblx0fVxuXG5cdHByaXZhdGUgZ2V0UGF5bG9hZChoZWFkZXI6IElIZWFkZXIsIGRhdGE6IEJ1ZmZlcikge1xuXHRcdHJldHVybiBkYXRhLnNsaWNlKGhlYWRlci5vZmZzZXQsIGRhdGEubGVuZ3RoKTtcblx0fVxuXG5cdHByaXZhdGUgZGVjb2RlSGFuZHNoYWtlKGRhdGE6IEJ1ZmZlcik6IG9iamVjdCB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoZGF0YS50b1N0cmluZygpKTtcblx0fVxuXG5cdHByaXZhdGUgZGVjb2RlUG9uZyhkYXRhOiBCdWZmZXIpOiBudW1iZXIge1xuXHRcdHJldHVybiBOdW1iZXIoQmlnSW50KERhdGUubm93KCkpIC0gdG9CaWdJbnRCRShkYXRhKSk7XG5cdH1cbn1cbiJdfQ==